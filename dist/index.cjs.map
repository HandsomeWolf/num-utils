{"version":3,"sources":["../src/index.ts","../src/basic/converter/digit-uppercase.ts","../src/basic/finance/index.ts","../src/basic/utils/validation.ts","../src/basic/formatter/thousand-separator.ts","../src/basic/formatter/currency-renminbi.ts","../src/basic/formatter/percentage.ts","../src/basic/utils/math.ts","../src/basic/math/compute-expression.ts","../src/basic/math/unit-conversion.ts","../src/basic/utils/common.ts","../src/vue/element-plus/utils/formatter.ts","../src/vue/element-plus/validation/range/index.ts","../src/vue/element-plus/utils/summary-row.ts"],"sourcesContent":["// ------------------------ converter ------------------------\n\n// digit-uppercase (数字大写)\nexport { digitUppercase } from \"./basic/converter/digit-uppercase\";\n\n// ------------------------ finance ------------------------\n\n// Finance Calculations (财务计算)\nexport {\n  calculateGrossAmount,\n  calculateNetAmount,\n  calculateTaxAmount,\n  calculateTaxRate,\n} from \"./basic/finance\";\n\n// ------------------------ formatter ------------------------\n\n// Thousand Separator (千位分隔符)\nexport {\n  addThousandSeparator,\n  removeThousandSeparator,\n} from \"./basic/formatter/thousand-separator\";\n\n// currency (货币)\nexport { formatCurrencyRenminbi } from \"./basic/formatter/currency-renminbi\";\n\n// percentage (百分比)\nexport { formatPercentage } from \"./basic/formatter/percentage\";\n\n// ------------------------ math ------------------------\n\n// computeExpression (计算表达式)\nexport { computeExpression } from \"./basic/math/compute-expression\";\n\n// unitConversion (单位换算)\nexport { unitConversion } from \"./basic/math/unit-conversion\";\n\n// ------------------------ utils ------------------------\n\n// validation (校验)\nexport {\n  isNumeric,\n  isValidThousandSeparatedNumber,\n  isBlank,\n} from \"./basic/utils/validation\";\n\n// getDecimalInfo (获取小数信息), getDecimalPlaces (获取小数位数), padZero (补零)\nexport {\n  getDecimalInfo,\n  getDecimalPlaces,\n  padZero,\n} from \"./basic/utils/common\";\n\n// ------------------------ Element Plus ------------------------\n\n// thousand-separator for Element Plus input (el-input的千位分隔符)\nexport {\n  formatDecimalForElementPlus,\n  addThousandSeparatorForElementPlus,\n  removeThousandSeparatorForElementPlus,\n} from \"./vue/element-plus/utils/formatter\";\n\n// Validation rule for Element Plus form (Element Plus表单校验规则)\nexport { isInRangeForElementPlus } from \"./vue/element-plus/validation/range/index\";\n\n// Summary row for Element Plus table (Element Plus表格尾合计行\nexport { summaryRowForElementPlus } from \"./vue/element-plus/utils/summary-row\";\n","/**\n * Convert amount to uppercase (将金额转换为大写)\n * @param n amount (金额)\n * @returns amount in uppercase (金额的大写形式)\n */\nexport function digitUppercase(n: number): string {\n  // Define the fraction part (定义小数部分)\n  const fraction = [\"角\", \"分\"];\n  // Define the digit part (定义数字部分)\n  const digit = [\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"];\n  // Define the unit part (定义单位部分)\n  const unit = [\n    [\"元\", \"万\", \"亿\"],\n    [\"\", \"拾\", \"佰\", \"仟\"],\n  ];\n  // Define the head part (定义头部部分)\n  const head = n < 0 ? \"欠\" : \"\";\n  // Convert n to its absolute value (将 n 转换为其绝对值)\n  n = Math.abs(n);\n  let s = \"\";\n  // Convert the fraction part (转换小数部分)\n  for (const [index, element] of fraction.entries()) {\n    s += (digit[Math.floor(n * 10 * 10 ** index) % 10] + element).replace(\n      /零./,\n      \"\",\n    );\n  }\n  s = s || \"整\";\n  // Convert the integer part (转换整数部分)\n  n = Math.floor(n);\n  for (let index = 0; index < unit[0].length && n > 0; index++) {\n    let p = \"\";\n    for (let index_ = 0; index_ < unit[1].length && n > 0; index_++) {\n      p = digit[n % 10] + unit[1][index_] + p;\n      n = Math.floor(n / 10);\n    }\n    s = p.replace(/(零.)*零$/, \"\").replace(/^$/, \"零\") + unit[0][index] + s;\n  }\n  // Return the final result (返回最终结果)\n  return (\n    head +\n    s\n      .replace(/(零.)*零元/, \"元\")\n      .replaceAll(/(零.)+/g, \"零\")\n      .replace(/^整$/, \"零元整\")\n  );\n}\n","// 计算含税金额\nexport function calculateGrossAmount(\n  netAmount: number,\n  taxRate: number,\n): number {\n  return netAmount * (1 + taxRate);\n}\n\n// 计算税率\nexport function calculateTaxRate(\n  grossAmount: number,\n  netAmount: number,\n): number {\n  return (grossAmount - netAmount) / netAmount;\n}\n\n// 计算税额\nexport function calculateTaxAmount(\n  grossAmount: number,\n  netAmount: number,\n): number {\n  return grossAmount - netAmount;\n}\n\n// 计算裸税金额\nexport function calculateNetAmount(\n  grossAmount: number,\n  taxRate: number,\n): number {\n  return grossAmount / (1 + taxRate);\n}\n","/**\n *  判断是否为千分位格式\n * @param value 要判断的字符串\n * @returns 如果string_为千分位格式，返回true；否则返回false。\n */\nexport function isValidThousandSeparatedNumber(value: string) {\n  const regex = /^\\d{1,3}(,\\d{3})+(\\.\\d+)?$/;\n  return regex.test(value);\n}\n\n/**\n * 判断字符串是否为空或只包含空格\n * @param {string} value - 待检查的字符串\n * @returns {boolean} 是空字符串或只包含空格时返回 true，否则返回 false\n */\nexport function isBlank(value: string): boolean {\n  return !value || /^\\s*$/.test(value);\n}\n\n/**\n * 判断参数是否为数字或字符串数字\n * @param {string | number} value - 待检查的参数\n * @returns {boolean} 是数字或字符串数字时返回 true，否则返回 false\n */\nexport function isNumeric(value: string | number): boolean {\n  const isNumber =\n    (!Number.isNaN(value as any) && typeof value === \"number\") ||\n    (!Number.isNaN(Number.parseFloat(value as any)) &&\n      !Number.isNaN((value as any) - 0));\n  return isNumber;\n}\n","import { isValidThousandSeparatedNumber } from \"../utils/validation\";\n\n/**\n *  转换为千分位格式\n * @param value 要转换的数字，可以是数字、字符串\n * @param asString 是否将结果转换为字符串，默认为false\n * @returns 如果value为数字或字符串，返回千分位格式的数字或字符串；\n *          如果value为null或undefined，返回null或undefined；\n *          如果value为0或空字符串，根据asString参数返回0或\"0\"。\n */\nexport function addThousandSeparator(\n  value: string | number,\n  asString = false,\n): IOType {\n  if (value === null || value === undefined || value === 0 || value === \"\") {\n    return asString ? String(value) : value;\n  }\n\n  const [integerPart, decimalPart] = String(value).split(\".\");\n  const formattedIntegerPart = integerPart.replaceAll(\n    /\\B(?=(\\d{3})+(?!\\d))/g,\n    \",\",\n  );\n\n  return decimalPart\n    ? `${formattedIntegerPart}.${decimalPart}`\n    : formattedIntegerPart;\n}\n\n/**\n *  移除千分位格式\n * @param input 要移除千分位格式的字符串数字\n * @returns 如果input为数字或字符串，返回移除千分位格式后的数字；\n *          如果input为null或undefined或空字符串，返回0。\n */\nexport function removeThousandSeparator(\n  input: string,\n  defaultReturn?: any,\n): IOType {\n  const getDefaultReturn = (result: IOType) =>\n    defaultReturn === undefined ? result : defaultReturn;\n\n  if (input === null || input === undefined || input === \"\") {\n    console.warn(`removeThousandSeparator: parameter is ${input}`);\n    return getDefaultReturn(input);\n  }\n\n  if (!isValidThousandSeparatedNumber(input)) {\n    console.warn(\n      `removeThousandSeparator: ${input} is not a valid thousand separated number`,\n    );\n  }\n\n  if (typeof input === \"number\") {\n    return input;\n  }\n\n  const result = input.replaceAll(/\\$\\s?|(,*)/g, \"\");\n\n  return result === \"\" ? getDefaultReturn(result) : Number(result);\n}\n","/**\n *  格式化人民币\n * @param value 要格式化的数字\n * @returns 返回格式化后的人民币字符串\n */\nexport function formatCurrencyRenminbi(value: number): string {\n  const formatter = new Intl.NumberFormat(\"zh-CN\", {\n    style: \"currency\",\n    currency: \"CNY\",\n  });\n  return formatter.format(value);\n}\n","import { computeExpression, padZero } from \"../../index\";\n\n/**\n *  格式化百分比\n * @param input 要格式化的数字或字符串，可以是数字、字符串、null或undefined\n * @param decimalPlaces 小数位数，如果为boolean类型，将被视为carrySymbol参数\n * @param carrySymbol 是否带有百分号，默认为true\n * @returns 如果input为数字或字符串，返回格式化后的百分比字符串；\n *          如果input为null或undefined，返回null或undefined；\n *          如果input为非数字字符串，返回原字符串。\n */\nexport function formatPercentage(\n  input: number | string,\n  options: {\n    decimalPlaces?: number;\n    carrySymbol?: boolean;\n  } = {},\n): string {\n  options = {\n    carrySymbol: true,\n    ...options,\n  };\n  if (input === null || input === undefined || input === \"\") {\n    return input;\n  }\n\n  if (typeof input === \"string\" && Number.isNaN(Number(input))) {\n    return input;\n  }\n  const result =\n    options.decimalPlaces === undefined\n      ? computeExpression(`${input} * 100`)\n      : padZero(\n          Number(\n            computeExpression(`${input} * 100`, {\n              decimalPlaces: options.decimalPlaces,\n            }),\n          ),\n          options.decimalPlaces,\n        );\n  return `${result.toString()}${options.carrySymbol ? \"%\" : \"\"}`;\n}\n","import { type BigNumber, type MathJsStatic, all, create } from \"mathjs\";\nimport { isValidThousandSeparatedNumber } from \"../../index\";\n\nexport const math: MathJsStatic = create(all, { number: \"BigNumber\" });\n\ninterface Parameters {\n  [key: string]: number | string | BigNumber;\n}\n\n// 该函数将参数转为BigNumber类型\nexport function convertToBigNumbers(parameters: Parameters) {\n  const convertedParameters: Parameters = {};\n  for (const [key, value] of Object.entries(parameters)) {\n    if (typeof value === \"number\") {\n      convertedParameters[key] = math.bignumber(value);\n    } else if (typeof value === \"string\") {\n      convertedParameters[key] = isValidThousandSeparatedNumber(value)\n        ? math.bignumber(Number(value.replaceAll(\",\", \"\")))\n        : math.bignumber(value);\n    }\n  }\n  return convertedParameters;\n}\n","import { addThousandSeparator, padZero } from \"../../index\";\nimport { convertToBigNumbers, math } from \"../utils/math\";\n\ninterface ComputeExpressionOptions {\n  parameters?: NumberDictionary;\n  decimalPlaces?: number;\n  useThousandSeparator?: boolean;\n}\n\nexport function computeExpression(\n  formula: string,\n  options: ComputeExpressionOptions = {},\n): string {\n  let result;\n  const formulaResult = formula.replaceAll(\",\", \"\");\n\n  // Check if parameters are provided (检查是否提供了参数)\n  result =\n    options.parameters === undefined\n      ? math.evaluate(formulaResult)\n      : math.evaluate(formulaResult, convertToBigNumbers(options.parameters));\n\n  // Check if decimalPlaces are provided (检查是否提供了 decimalPlaces)\n  if (options.decimalPlaces !== undefined) {\n    result = padZero(\n      result.toFixed(options.decimalPlaces),\n      options.decimalPlaces,\n    );\n  }\n\n  // Check if useThousandSeparator is provided (检查是否提供了 useThousandSeparator)\n  if (options.useThousandSeparator) {\n    result = addThousandSeparator(result);\n  }\n\n  return result.toString();\n}\n","import { math } from \"../utils/math\";\nexport function unitConversion(\n  value: number,\n  fromUnit: string,\n  toUnit: string,\n  withUnit = false,\n): string | number {\n  const result = math.evaluate(`${value} ${fromUnit} to ${toUnit}`);\n  return withUnit ? result.toString() : result.toNumber();\n}\n","export interface DecimalInfo {\n  /**\n   * The string form of the number (数字的字符串形式)\n   */\n  valueString: string;\n  /**\n   * The index position of the decimal point (小数点的索引位置)\n   */\n  decimalIndex: number;\n  /**\n   * The length of the decimal part (小数部分的长度)\n   */\n  decimalLength: number;\n  /**\n   * The integer part of the number (整数部分)\n   */\n  integerPart: string;\n  /**\n   * The decimal part of the number (小数部分)\n   */\n  decimalPart: string;\n  /**\n   * The length of the integer part (整数部分的长度)\n   */\n  integerLength: number;\n}\n\n/**\n * Get the decimal information of a number (获取数字的小数信息)\n * @param value - The input number (输入的数字)\n * @returns The decimal information object (小数信息对象)\n */\nexport const getDecimalInfo = (value: number): DecimalInfo => {\n  const valueString = value.toString();\n  const [integerPart, decimalPart = \"\"] = valueString.split(\".\");\n  const decimalIndex = integerPart.length;\n  const decimalLength = decimalPart.length;\n  const integerLength = integerPart.length;\n  return {\n    valueString,\n    decimalIndex,\n    decimalLength,\n    integerPart,\n    decimalPart,\n    integerLength,\n  };\n};\n\n/**\n * Get the number of decimal places of a number\n *\n * 获取数字的小数位数\n * @param value - The input number (输入的数字)\n * @returns The number of decimal places of the input number (返回输入数字的小数位数)\n */\nexport const getDecimalPlaces = (value: number): number => {\n  const { decimalLength } = getDecimalInfo(value);\n  return decimalLength;\n};\n\n/**\n * Pad a number with zeros\n *\n * 为数字填充零\n * @param value - The number to be padded (需要填充的数字)\n * @param decimalLength - The number of decimal places (小数位数)\n * @returns If no decimal places are specified, return the original number string; otherwise, return the padded number string\n *          如果没有指定小数位数，返回原数字字符串；否则，返回填充后的数字字符串\n */\nexport const padZero = (value: number, decimalLength: number = 0): string => {\n  const { valueString, decimalLength: currentDecimalPlaces } =\n    getDecimalInfo(value);\n  if (currentDecimalPlaces < decimalLength) {\n    const zeroCount = decimalLength - currentDecimalPlaces;\n    return `${valueString}${currentDecimalPlaces === 0 ? \".\" : \"\"}${\"0\".repeat(\n      zeroCount,\n    )}`;\n  }\n  return valueString;\n};\n","export const addThousandSeparatorForElementPlus = (value: string) => {\n  if (!value) return \"\";\n  const parts = value.toString().split(\".\");\n  parts[0] = parts[0]\n    .replaceAll(\",\", \"\")\n    .replaceAll(/(\\d)(?=(?:\\d{3})+$)/g, \"$1,\");\n  return parts.join(\".\");\n};\nexport const removeThousandSeparatorForElementPlus = (\n  value: string,\n  options: { decimalPlaces?: number; defaultReturn?: string } = {},\n) => {\n  if (!value)\n    return options.defaultReturn === undefined ? \"\" : options.defaultReturn;\n\n  // 处理以.开头的情况\n  value = value.startsWith(\".\") ? `0${value}` : value;\n\n  // 只允许数字和小数点，且只允许一个小数点\n  const result = value.replaceAll(/[^\\d.]/g, \"\").replaceAll(/(\\..*)\\./g, \"$1\");\n  if (result === \"\")\n    return options.defaultReturn === undefined ? \"\" : options.defaultReturn;\n\n  const parts = result.split(\".\");\n  if (\n    parts[1] &&\n    options.decimalPlaces &&\n    parts[1].length > options.decimalPlaces\n  ) {\n    parts[1] = parts[1].slice(0, options.decimalPlaces);\n  }\n\n  // 处理数字以0开头的情况，但不包括0后面跟着小数点的情况\n  if (\n    parts[0].startsWith(\"0\") &&\n    !parts[0].startsWith(\"0.\") &&\n    parts[0].length > 1\n  ) {\n    parts[0] = parts[0].slice(1);\n  }\n\n  return parts.join(\".\");\n};\n\n/**\n * `formatDecimalForElementPlus` 函数用于删除千位分隔符并保留2位小数\n * @param {string} value - 输入的字符串，期望是一个包含千位分隔符的数字字符串\n * @param {object} options - 可选参数，包含 `defaultReturn` 属性，当输入的 `value` 不符合预期时，将返回 `defaultReturn` 的值\n * @returns {string} 返回处理后的字符串，该字符串已删除千位分隔符，并保留2位小数\n * @example https://github.com/element-plus/element-plus/blob/dev/packages/utils/number.ts\n */\n\nexport const formatDecimalForElementPlus = (\n  value: string,\n  options: { defaultReturn?: string } = {},\n) => {\n  return removeThousandSeparatorForElementPlus(value, {\n    decimalPlaces: 2,\n    defaultReturn: options.defaultReturn,\n  });\n};\n","import { removeThousandSeparator } from \"../../../../basic/formatter/thousand-separator\";\n\nexport interface Options {\n  /**\n   * Whether the value is required (值是否必填)\n   */\n  positive?: boolean;\n  /**\n   * Whether to allow integers (是否允许整数)\n   */\n  integer?: boolean;\n  /**\n   * Whether to allow positive integers (是否允许正整数)\n   */\n  positiveInteger?: boolean;\n  /**\n   * Whether to allow negative numbers (是否允许负数)\n   */\n  negative?: boolean;\n  /**\n   * Whether to allow negative integers (是否允许负整数)\n   */\n  negativeInteger?: boolean;\n  /**\n   * The number of decimal places (小数位数)\n   */\n  decimal?: number;\n  /**\n   * The minimum value (最小值)\n   */\n  min?: number;\n  /**\n   * The maximum value (最大值)\n   */\n  max?: number;\n  /**\n   * The unit of the value (值的单位)\n   */\n  unit?: string;\n}\n\ninterface Rule {\n  required: boolean;\n}\n\ntype Callback = (error?: Error) => void;\n\nexport const isInRangeForElementPlus = (\n  name: string,\n  options: Options = {},\n  lang: \"en\" | \"zh\" = \"en\",\n) => {\n  const messages = {\n    en: {\n      mustBeNumber: `${name} must be a number`,\n      required: `Please enter ${name}`,\n      mustBePositive: `${name} must be a positive number`,\n      mustBeInteger: `${name} must be an integer`,\n      mustBePositiveInteger: `${name} must be a positive integer`,\n      mustBeNegative: `${name} must be a negative number`,\n      mustBeNegativeInteger: `${name} must be a negative integer`,\n      decimalExceed: `The number of decimal places in ${name} cannot exceed ${options.decimal}`,\n      lessThanMin: `${name} cannot be less than ${options.min}${options.unit}`,\n      moreThanMax: `${name} cannot be more than ${options.max}${options.unit}`,\n    },\n    zh: {\n      mustBeNumber: `${name}必须是数字`,\n      required: `请输入${name}`,\n      mustBePositive: `${name}必须是正数`,\n      mustBeInteger: `${name}必须是整数`,\n      mustBePositiveInteger: `${name}必须是正整数`,\n      mustBeNegative: `${name}必须是负数`,\n      mustBeNegativeInteger: `${name}必须是负整数`,\n      decimalExceed: `${name}的小数点位数不能超过${options.decimal}`,\n      lessThanMin: `${name}不能小于${options.min}${options.unit}`,\n      moreThanMax: `${name}不能大于${options.max}${options.unit}`,\n    },\n  };\n\n  return (rule: Rule, value: any, callback: Callback) => {\n    const handleError = (message: string) => callback(new Error(message));\n\n    // Convert to number\n    value = removeThousandSeparator(value);\n\n    // Error handling function\n\n    // Check if the input value is a number\n    if (Number.isNaN(value)) {\n      return handleError(messages[lang].mustBeNumber);\n    }\n    // Is it a required field?\n    if (rule.required && !value) {\n      return handleError(messages[lang].required);\n    }\n\n    // Is it a positive number?\n    if (options.positive && (!Number.isFinite(value) || value <= 0)) {\n      return handleError(messages[lang].mustBePositive);\n    }\n\n    // Is it an integer?\n    if (options.integer && !Number.isInteger(value)) {\n      return handleError(messages[lang].mustBeInteger);\n    }\n\n    // Is it a positive integer?\n    if (options.positiveInteger && (!Number.isInteger(value) || value <= 0)) {\n      return handleError(messages[lang].mustBePositiveInteger);\n    }\n\n    // Is it a negative number?\n    if (options.negative && (!Number.isFinite(value) || value >= 0)) {\n      return handleError(messages[lang].mustBeNegative);\n    }\n\n    // Is it a negative integer?\n    if (options.negativeInteger && (!Number.isInteger(value) || value >= 0)) {\n      return handleError(messages[lang].mustBeNegativeInteger);\n    }\n\n    // Check the number of decimal places\n    if (options.decimal !== undefined) {\n      const decimalPart = value.toString().split(\".\")[1];\n      if (!decimalPart || decimalPart.length > options.decimal) {\n        return handleError(messages[lang].decimalExceed);\n      }\n    }\n\n    // Check the minimum value\n    if (options.min !== undefined && value < options.min) {\n      return handleError(messages[lang].lessThanMin);\n    }\n\n    // Check the maximum value\n    if (options.max !== undefined && value > options.max) {\n      return handleError(messages[lang].moreThanMax);\n    }\n\n    callback();\n  };\n};\n","import { addThousandSeparator, computeExpression } from \"../../../index\";\n\n// Define the Column interface (定义 Column 接口)\ninterface Column {\n  property: string;\n}\n\n// Define the properties for the summary method (定义 summary 方法的属性)\ninterface SummaryMethodProperties {\n  columns: Column[];\n  data: [];\n}\n\n// Define the options for the summary row (定义 summary row 的选项)\ninterface Options {\n  totalCostLabel?: string;\n  excludeColumns?: string[];\n  includeColumns?: string[];\n  currency?: string;\n  placeholder?: string;\n  decimalPlaces?: number;\n  useThousandSeparator?: boolean;\n  columnOptions?: {\n    [key: string]: {\n      decimalPlaces?: number;\n      currency?: string;\n      placeholder?: string;\n      useThousandSeparator?: boolean;\n    };\n  };\n}\n\nexport const summaryRowForElementPlus = (\n  parameter: SummaryMethodProperties,\n  options: Options = {},\n) => {\n  const { columns, data } = parameter;\n  const {\n    totalCostLabel = \"Total Cost\",\n    excludeColumns = [],\n    includeColumns,\n    currency = \"\",\n    placeholder = \"\",\n    decimalPlaces,\n    useThousandSeparator = false,\n    columnOptions = {},\n  } = options;\n  const sums: string[] = [];\n\n  for (const [index, column] of columns.entries()) {\n    if (\n      excludeColumns.includes(column.property) ||\n      (includeColumns && !includeColumns.includes(column.property))\n    ) {\n      sums[index] = placeholder;\n      continue;\n    }\n    if (index === 0) {\n      sums[index] = totalCostLabel;\n      continue;\n    }\n    const values = data.map((item) => Number(item[column.property]));\n    let sum = \"\";\n    const columnDecimalPlaces =\n      columnOptions[column.property]?.decimalPlaces ?? decimalPlaces;\n    const columnCurrency = columnOptions[column.property]?.currency ?? currency;\n    const columnPlaceholder =\n      columnOptions[column.property]?.placeholder ?? placeholder;\n    const columnUseThousandSeparator =\n      columnOptions[column.property]?.useThousandSeparator ??\n      useThousandSeparator;\n    for (const value_ of values) {\n      const value = Number(value_);\n      if (!Number.isNaN(value)) {\n        sum = computeExpression(`${sum} + ${value}`, {\n          decimalPlaces: columnDecimalPlaces,\n        });\n      }\n    }\n    if (columnUseThousandSeparator) {\n      sum = addThousandSeparator(sum) as string;\n    }\n    sums[index] = values.every((value) => Number.isNaN(value))\n      ? columnPlaceholder\n      : `${columnCurrency} ${sum}`;\n  }\n\n  return sums;\n};\n"],"mappings":"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","names":["src_exports","__export","addThousandSeparator","addThousandSeparatorForElementPlus","calculateGrossAmount","calculateNetAmount","calculateTaxAmount","calculateTaxRate","computeExpression","digitUppercase","formatCurrencyRenminbi","formatDecimalForElementPlus","formatPercentage","getDecimalInfo","getDecimalPlaces","isBlank","isInRangeForElementPlus","isNumeric","isValidThousandSeparatedNumber","padZero","removeThousandSeparator","removeThousandSeparatorForElementPlus","summaryRowForElementPlus","unitConversion","__toCommonJS","digitUppercase","n","fraction","digit","unit","head","s","index","element","__pow","p","index_","calculateGrossAmount","netAmount","taxRate","calculateTaxRate","grossAmount","calculateTaxAmount","calculateNetAmount","isValidThousandSeparatedNumber","value","isBlank","isNumeric","addThousandSeparator","value","asString","integerPart","decimalPart","formattedIntegerPart","removeThousandSeparator","input","defaultReturn","getDefaultReturn","result","isValidThousandSeparatedNumber","formatCurrencyRenminbi","value","formatPercentage","input","options","__spreadValues","computeExpression","padZero","import_mathjs","math","convertToBigNumbers","parameters","convertedParameters","key","value","isValidThousandSeparatedNumber","computeExpression","formula","options","result","formulaResult","math","convertToBigNumbers","padZero","addThousandSeparator","unitConversion","value","fromUnit","toUnit","withUnit","result","math","getDecimalInfo","value","valueString","integerPart","decimalPart","decimalIndex","decimalLength","integerLength","getDecimalPlaces","padZero","currentDecimalPlaces","zeroCount","addThousandSeparatorForElementPlus","value","parts","removeThousandSeparatorForElementPlus","options","result","formatDecimalForElementPlus","isInRangeForElementPlus","name","options","lang","messages","rule","value","callback","handleError","message","removeThousandSeparator","decimalPart","summaryRowForElementPlus","parameter","options","_a","_b","_c","_d","_e","_f","_g","_h","columns","data","totalCostLabel","excludeColumns","includeColumns","currency","placeholder","decimalPlaces","useThousandSeparator","columnOptions","sums","index","column","values","item","sum","columnDecimalPlaces","columnCurrency","columnPlaceholder","columnUseThousandSeparator","value_","value","computeExpression","addThousandSeparator"]}